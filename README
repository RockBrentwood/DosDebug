1. About Debug and DebugX
─────────────────────────
Debug/X is a package of debuggers. The most important ones are:
∙	Debug is a clone of the MS-DOS DEBUG command.
	Some minor features aren't implemented.
	OTOH it has many features not available in the original MS DEBUG.
	For details see below.
∙	DebugX is an extended version of Debug that allows one to debug both real-mode and protected-mode (DPMI) DOS programs.
∙	Additional variants like DebugXV, DebugXG, DebugB or DebugR that are useful for special cases are also included.
	For details see below.

2. Files Overview
─────────────────
The files in this distribution are:
∙	bin		The directory for the executable binaries.
∙	doc		The directory for related documentation
∙	log		The directory for the compilation/assembly logs; summaries on the 80x86 opcodes may later be added.
∙	README		This file.
∙	doc/History.txt	The log of changes.
∙	doc/Debug.txt	An MS-Debug tutorial originally written by Michael Webster,
			extended to describe all additional features of Debug(X).
∙	demo		Samples of 16 and 32-bit DPMI clients in masm syntax.
∙	test		Test files; not (yet) integrated into a "make test".

The following files, which may be distributed separately, are needed if Debug.com or DebugX.com is to be rebuilt:
∙	Debug.asm	The assembler source code for both Debug.com and DebugX.com.
			Assemble with jwasm or masm (see Make.sh).
∙	DebugTab.inc	The include file for Debug.asm, contains tables for Debug's internal assembler and disassembler command.
∙	DebugTabX.inc	The version of the include file DebugTab.inc that came with the distribution.
			It has conditional assembly and extra comments that are not generated by MakeTabs.c.
∙	Op.*		The input data for MakeTabs.
∙	MakeTabs.c	A C program to compile the internal instruction-set tables into the source file DebugTab.inc.
			It's supposed to be translated with Open Watcom's 16bit compiler WCC.
∙	Make.sh		A shell script to (re)assemble Debug.com and DebugX.com.
∙	MakeC.sh	A shell script to (re)compile the MakeTabs executable and (re)generate DebugTabs.inc.
∙	MakeX.sh	A shell script to assemble special versions of DebugX.
∙	Makefile	A Makefile combining the actions of Make{,C,X}.sh; currently configured for a Linux platform.

Note:
∙	The files MakeTabs.c and Op.* are to be removed in one of the next versions of Debug.
	Then the file DebugTab.inc is supposed to be modified directly if new instructions are to be supported.

3. Added/Missing Features
─────────────────────────
a.	Debug extends MS-Debug in the following ways:
	―	The assembler and disassembler support all publicly documented instructions
		for Intel chips through the Pentium Pro (P6),
		except for the MMX instructions (as for DebugX, MMX is partially supported since v1.18).
		The assembler and disassembler inform you if any instruction is inappropriate for the current processor.
	―	FPU Opcodes are supported.
	―	The current processor (for the purposes of assembler and disassembler warnings, above)
		can be declared to be something else via the following commands:
		m [x] set the current processor.
		∙	x = 0: the current processor is 8088.
		∙	x = 1..6: the current processor is 80x86.
			80586 is a Pentium and 80686 is a Pentium Pro.
		∙	no argument = print current CPU/FPU types.
		mc [2|N] set the math co-processor.
		∙	2 = the math co-processor is a 287 (only valid if current processor is a 386).
		∙	N = the math co-processor is absent.
		∙	no argument = the math co-processor is present.
	―	'r register [value]' accepts 32-bit register names (for cpu 80386+).
	―	You can do `r cx 1234' instead of having to put the `1234' on a separate line.
	―	'rn' displays the FPU register status.
		Just the raw hex values of the registers are displayed, though.
	―	'rx' switches among 8086 and 80386 register display (for cpu 80386+).
	―	When doing `Debug < file', Debug will not hang if it reaches an end of file before encountering a `q' command.
	―	This debugger saves and restores the program's Control-C and critical error interrupts,
		providing for better isolation between the debugger and the program being debugged.
	―	'tm 0|1' sets trace command mode,
		∙	0: process INTs (default),
		∙	1: single-step INTs (the MS-DOS Debug compatible mode).
	―	'xr' allows one to reallocate an EMS handle
		and
		'xa' allows one to allocate an "empty" EMS handle (with zero pages) -
		but only if an EMM v4.0 is present.
	―	Besides 'i' and 'o' exist the variations 'iw', 'id', 'ow' and 'od'
		to read/write a WORD or DWORD value from/to a port
		[DWORD values require a 80386+ cpu].
	―	'h' can handle dword values.
	―	register names can be used anywhere where a number is expected as input.
		That is, things like "u cs:ip" do work.
	―	'dm' displays the DOS memory control block (MCB) chain and the current PSP.
	―	if DOS has set its InDOS flag, Debug will avoid to use int 21h internally,
		which allows one to single-step through DOS code.
	―	'd', 't' and 'u' are automatically repeated if a blank line is entered.
b.	DebugX has the following additional features:
	―	besides real-mode applications it can debug both 16-bit and 32-bit DPMI clients.
		[To debug DPMI clients a DPMI host has to be installed.
		Tested with cwsdpmi, hdpmi, WinXP NTVDM, 32rtm.
		In DosEmu and Windows 95/98/ME DOS boxes it is required
		to single-step through the initial switch to protected-mode,
		else DebugX will loose control of the debuggee.]
	―	'dl': display LDT descriptor(s) (in protected-mode only)
	―	'di': display interrupt vector(s)
	―	'dx': display extended memory (read via Int 15h, ah=87h).
		Requires a 80386 cpu.
		'dx' is automatically repeated if a blank line is entered.
		Be aware that Int 15h, ah=87h most likely will disable "unreal"-mode if it was enabled.
		This may be an unwanted side effect during debugging.
	―	'rn' displays FPU registers in "readable" format.
	―	when running in a Windows XP DOS box, DebugX will try to load and use debxxvdd.dll.
		This DLL will allow DebugX to successfully execute its low-level disk access commands L and W in this OS -
		if the user has administrator rights.
		debxxvdd.dll is public domain, the source can be found at http://github.com/Baron-von-Riedesel/debxxf.
		Please be aware that you can do severe damage to your disk data
		if you use those low-level functions without knowing what you are doing.
	―	'rm' displays MMX registers.
	―	the command-line option /2 may direct DebugX's output to a monochrome video adapter if one is available.
		Useful for emulators that support this feature (DosBox-x or 86Box, for example).
		Needs at least a VGA compatible card, and there's no guarantee that it works as expected.
c.	Optionally, one may create special-purpose versions of DebugX.
	Run the file MakeX.sh to create them; you'll need the jwasm assembler for a successful run.
	The additional versions are:
	DebugXD.com:	a version which doesn't hook int 01 and int 03.
			This allows one to debug this version with a "normal" version of Debug(X).
	DebugXE.com:	a version which hooks interrupts 06, 0Ch and 0Dh in real-mode.
			This is for - rare - cases when such exceptions may occur in real-mode applications.
	DebugXF.com:	a version which hooks interrupt 31h in protected-mode
			and then rejects any attempt to modify exception vectors 01, 03, 0Dh and 0Eh.
			This allows one to debug DOS-extended applications that modify these vectors.
	DebugXG.exe:	a version that is in DOS device driver format.
			This variant can be used to debug other device drivers.
			There are a few peculiarities: commands N and Q are rejected,
			commands R and W can't be used to read/write files and interrupt 06 (invalid opcode exception) is hooked.
	DebugXU.com:	a version that uses "unreal" mode to access extended memory for the DX command.
			This is useful for debugging applications that set/use "unreal" mode themselves,
			because DebugXU will not change the current "unreal" state by its DX command.
	DebugXV.com:	a version that takes care that screen output of debuggee and debugger are strictly separated -
			the new 'v' command is provided to watch the debuggee screen while the debugger is active.
			Additionally, the SysReq key is detected and will activate the debugger.
			This Debug version is useful for debugging fullscreen text mode programs.
	DebugB.bin:	a version that is supposed to be loaded during the boot process, before DOS is loaded.
			Has to be installed in "free" disk space
			(for example, in the "reserved" sectors of a FAT partition or behind the disk's MBR)
			and must be initialized before it becomes active.
			Definitely not for beginners.
			See "Installing and Initializing DebugB" in doc/Debug.txt for details.
	DebugR(L).bin:	versions that runs in ring0 protected-mode.
			These variants need additional software
			a)	to be loaded
			and
			b)	to handle the I/O requests.
			Like DebugB.bin no DOS is used - actually, not even the BIOS is used -
			and hence these are not really "DOS debuggers" anymore.
			See "DebugR Basics" in doc/Debug.txt for more details.

d.	The following features of MS Debug are not implemented:
	―	Loading of .hex files.

4. How to (re)build the Debug.com/DebugX.com Binaries
─────────────────────────────────────────────────────
Make.sh is intended for rebuilding the debugger binaries.
The recommended tool for this step is to use the jwasm assembler.
Alternatively, one can use MS masm, but then a 16-bit OMF linker will be needed as well (Open Watcom's WLink might do the job).
Also, the DebugRL variant cannot be created with masm, since it contains a 64-bit segment.

5. Copyright
────────────
This program is copyrighted, but feel free to distribute and use it as you wish.
For full copyright conditions, see the file Debug.asm.

Originally written by:
	Paul Vojta
	vojta@math.berkeley.edu
it is being remade and integrated into the other CPU-based repositories here,
particularly those dedicated to the 80x86 family, which it may be merged into.
